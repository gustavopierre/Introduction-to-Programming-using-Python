empty_set = set()
print("empty_set ->", empty_set)
alpha = set(("a", "b", "c", "d"))
print("alpha ->", alpha)
dup_list = ["c", "d", "c", "d", "e", "f"]
beta = set(dup_list)
print("dup_list ->", dup_list)
print("beta ->", beta)
uniq_list = list(beta)
print("uniq_list ->", uniq_list)
print()

gama = alpha.union(beta)
print("gama ->", gama)
gama = alpha | beta
print("gama ->", gama)
print()

delta = alpha.intersection(beta)
print("delta ->", delta)
delta = alpha & beta
print("delta ->", delta)
print()

epsilon = alpha.difference(beta)
print("epsilon ->", epsilon)
epsilon = alpha - beta
print("epsilon ->", epsilon)
print()

eta = alpha.symmetric_difference(beta)
print("eta ->", eta)
eta = alpha ^ beta
print("eta ->", eta)
print()
x = set(("b", "c"))
print("x ->", x)
print("epsilon.isdisjoint(delta) ->", epsilon.isdisjoint(delta))
print("epsilon.isdisjoint(eta) ->", epsilon.isdisjoint(eta))
print("epsilon.isdisjoint(x) ->", epsilon.isdisjoint(x))
print()

print("epsilon.issubset(beta) ->", epsilon.issubset(beta))
print("epsilon.issubset(eta) ->", epsilon.issubset(eta))
print("epsilon.issubset(x) ->", epsilon.isdisjoint(x))
print()
print("eta.issuperset(epsilon) ->", eta.issuperset(epsilon))
print("beta.issuperset(epsilon) ->", beta.issubset(epsilon))
print()

feta = frozenset(eta)
print("feta ->", feta)
print("type(feta) ->", type(feta))
print()
zeta = set()
print("zeta ->", zeta)
zeta.add(3)
print("zeta ->", zeta)
zeta.add(3)
print("zeta ->", zeta)
zeta.add(4)
print("zeta ->", zeta)
print()
print("gama ->", gama)
gama.discard("a")
print("gama ->", gama)
gama.discard("z")
print("gama ->", gama)
gama.remove("b")
print("gama ->", gama)
random_element = gama.pop()
print("random_element ->", random_element)
print("gama ->", gama)
print()

zeta_ref = zeta
zeta_copy = zeta.copy()
zeta.clear()
print("zeta ->", zeta)
print("zeta_ref ->", zeta_ref)
print("zeta_copy ->", zeta_copy)
print()

print("alpha ->", alpha)
print("beta ->", beta)
alpha_diff = alpha.copy()
alpha_diff.difference_update(beta)
print("alpha_diff ->", alpha_diff)
alpha_intersect = alpha.copy()
alpha_intersect.intersection_update(beta)
print("alpha_intersect ->", alpha_intersect)
alpha_sym_diff = alpha.copy()
alpha_sym_diff.symmetric_difference_update(beta)
print("alpha_sym_diff ->", alpha_sym_diff)
alpha_union = alpha.copy()
alpha_union.update(beta)
print("alpha_union ->", alpha_union)
